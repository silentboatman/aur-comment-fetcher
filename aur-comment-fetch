#!/usr/bin/env python
import AUR
import click
import requests
import textwrap
from bs4 import BeautifulSoup

BASE_URL = 'https://aur.archlinux.org/packages/'

class Comment(object):
    def __init__(self,author,timestamp,content,pinned):
        self.author = author
        self.timestamp = timestamp
        self.content = content
        self.pinned = pinned


def query(package):
    query = list(AUR.RPC.aur_query('search',package))
    if len(query) == 0:
        raise click.ClickException('couldn\'t find any package with name "{0}"'
                        .format(package))
    number = 0
    if len(query) > 1:
        for i,x in enumerate(query):
            print('\033[33m\033[1m{0}\033[0m: \033[33m{1} \033[32m{2}'
                  .format(i+1,x['Name'],x['Version']))
            print('\t\033[0m{0}'.format(x['Description']))
        number = click.prompt('\nspecify the number of the package', type=click.IntRange(1, len(query))) - 1

    return query[number]['Name']

def get(package):
    res = requests.get(BASE_URL+package+'/?comments=all',verify=True)
    if res.status_code != 200:
        package = query(package)
        res = requests.get(BASE_URL+package+'/?comments=all',verify=True)
        if res.status_code != 200:
            raise click.ClickException('couldn\'t fetch comments for package "{0}"'
                            .format(package))
    return package,res

def fetch_comments(package,number=5):
    package,res = get(package)
    soup = BeautifulSoup(res.content, 'lxml')
    allNews = soup.findAll('div',attrs={'id':'news'})
    comments = []
    i = 0

    for news in allNews:
        is_pinned = news.find('a').text == "Pinned Comments"
        authors = news.findAll('h4')
        timestamps = news.findAll('h4')
        contents = news.findAll('div',attrs={'class':'article-content'})
        for author,timestamp,content in zip(authors,timestamps,contents):
            if str(i) == number:
                return package,comments
            comments.append(Comment(author.text.strip().split()[0],
                " ".join(timestamp.text.strip().split()[3:5]),
                content.text.strip(),
                is_pinned))
            i += 1

    return package,comments

@click.command()
@click.argument('package')
@click.option('-a','--all','number',flag_value='-1',help='fetch all comments')
@click.option('-n','--number',default="5",help='specify number of comments to fetch')
@click.option('-r','--reverse','reverse_order',is_flag=True,help='show comments in reversed order')
def main(package,number,reverse_order):
    package,comments = fetch_comments(package,number)
    if len(comments) == 0:
        print('\033[31m\nno comments available for package "{0}"\n full info at {1}\n\033[0m'
            .format(package,BASE_URL+package))
        return
    else:
        print('\033[35m\n{4} {1} comments for package "{0}"{3}:\n full info at {2}\n\033[0m'
            .format(package,len(comments),BASE_URL+package,' (most recent last)' if reverse_order else '','All' if number == "-1" else 'Last'))
    for comment in (reversed(comments) if reverse_order else comments):
        if comment.pinned and reverse_order:
            print()
        print('\033[33m{0}:{2} Comment\033[33m by {1}\033[0m'
            .format(comment.timestamp,comment.author,'\033[36m Pinned' if comment.pinned else ''))
        print(textwrap.fill(comment.content,initial_indent='  ',subsequent_indent='  '))
        if comment.pinned and not reverse_order:
            print()


if __name__ == '__main__':
    main()
